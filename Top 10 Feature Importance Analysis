import matplotlib.pyplot as plt

# Fit the model with the best hyperparameters
best_rf_model = model.best_estimator_
best_rf_model.fit(X, y)

# Calculate feature importances
feature_importances = best_rf_model.feature_importances_

# Create a DataFrame to display feature importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})

# Sort the DataFrame by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print the top N features contributing to the model's prediction
top_n = 10
print(f"Top {top_n} Features:")
print(feature_importance_df.head(top_n))

# Extract the top N features and their importances
top_features = feature_importance_df['Feature'][:top_n]
top_importances = feature_importance_df['Importance'][:top_n]

# Create a bar chart for feature importances
plt.figure(figsize=(10, 6))
plt.barh(top_features, top_importances, color='skyblue')
plt.xlabel('Feature Importance')
plt.ylabel('Feature')
plt.title(f'Top {top_n} Features Importance')
plt.gca().invert_yaxis()  # Invert the y-axis to display the most important features at the top
plt.show()
